import os
import logging
import sys
import asyncio
import threading
from pathlib import Path
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Amvera
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('/data/bot.log') if Path('/data').exists() else logging.NullHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
data_dir = Path('/data')
if data_dir.exists():
    data_dir.mkdir(exist_ok=True)
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {data_dir}")
else:
    logger.info("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")

def save_statistics(user_id: int, username: str, message_type: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    try:
        stats_file = data_dir / 'statistics.txt' if data_dir.exists() else Path('statistics.txt')
        with open(stats_file, 'a', encoding='utf-8') as f:
            f.write(f"{user_id},{username},{message_type}\n")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    save_statistics(user.id, user.username or "unknown", "start")
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø –ø—Ä–æ—Å—Ç–æ–π —ç—Ö–æ-–±–æ—Ç. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ —Ç–µ–±–µ! üéØ\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ <b>–≠—Ö–æ-–±–æ—Ç - –°–ø—Ä–∞–≤–∫–∞</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ), 
–∏ —è –ø–æ–≤—Ç–æ—Ä—é –µ–≥–æ —Ç–µ–±–µ! üéØ

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Å —ç–º–æ–¥–∑–∏
‚Ä¢ –ö–æ–ø–∏—Ä—É–µ—Ç —Å—Ç–∏–∫–µ—Ä—ã –∏ GIF
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
    """
    await update.message.reply_html(help_text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!\n"
        "üü¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω\n"
        "üìä –í–µ—Ä—Å–∏—è: 1.0.0\n"
        "üåê –•–æ—Å—Ç–∏–Ω–≥: Amvera"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        stats_file = data_dir / 'statistics.txt' if data_dir.exists() else Path('statistics.txt')
        if stats_file.exists():
            with open(stats_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            if lines:
                total_messages = len(lines)
                unique_users = len(set(line.split(',')[0] for line in lines))
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                message_types = {}
                for line in lines:
                    msg_type = line.strip().split(',')[2]
                    message_types[msg_type] = message_types.get(msg_type, 0) + 1
                
                stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
                stats_text += f"üìà –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                stats_text += f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n\n"
                stats_text += f"üìù <b>–ü–æ —Ç–∏–ø–∞–º:</b>\n"
                
                for msg_type, count in sorted(message_types.items()):
                    stats_text += f"‚Ä¢ {msg_type}: {count}\n"
                
                await update.message.reply_html(stats_text)
            else:
                await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")
        else:
            await update.message.reply_text("üìä –§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - —ç—Ö–æ"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = update.effective_user
    chat_type = update.effective_chat.type
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_statistics(user.id, user.username or "unknown", "text")
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.username}) –≤ {chat_type}: {update.message.text}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
    await update.message.reply_text(
        f"üîÑ <b>–≠—Ö–æ:</b>\n{update.message.text}",
        parse_mode='HTML'
    )

async def echo_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if update.message.photo:
        media_type = "—Ñ–æ—Ç–æ"
        file_id = update.message.photo[-1].file_id
    elif update.message.video:
        media_type = "–≤–∏–¥–µ–æ"
        file_id = update.message.video.file_id
    elif update.message.voice:
        media_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        file_id = update.message.voice.file_id
    elif update.message.animation:
        media_type = "GIF"
        file_id = update.message.animation.file_id
    else:
        media_type = "–º–µ–¥–∏–∞-—Ñ–∞–π–ª"
        file_id = None
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_statistics(user.id, user.username or "unknown", media_type)
    
    # –õ–æ–≥–∏—Ä—É–µ–º
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {media_type} –æ—Ç {user.id} ({user.username})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ
    caption = f"üîÑ <b>–≠—Ö–æ {media_type}:</b>"
    if update.message.caption:
        caption += f"\n{update.message.caption}"
    
    if file_id:
        if update.message.photo:
            await update.message.reply_photo(file_id, caption=caption, parse_mode='HTML')
        elif update.message.video:
            await update.message.reply_video(file_id, caption=caption, parse_mode='HTML')
        elif update.message.voice:
            await update.message.reply_voice(file_id, caption=caption, parse_mode='HTML')
        elif update.message.animation:
            await update.message.reply_animation(file_id, caption=caption, parse_mode='HTML')
    else:
        await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–µ–Ω–æ {media_type}")

async def echo_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    save_statistics(user.id, user.username or "unknown", "—Å—Ç–∏–∫–µ—Ä")
    
    # –õ–æ–≥–∏—Ä—É–µ–º
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–∫–µ—Ä –æ—Ç {user.id} ({user.username})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ —Å—Ç–∏–∫–µ—Ä–∞
    await update.message.reply_sticker(update.message.sticker.file_id)

def run_bot_in_thread(application: Application) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º event loop"""
    def run_bot():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            loop.run_until_complete(application.run_polling(allowed_updates=Update.ALL_TYPES))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
        finally:
            loop.close()
    
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        logger.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_token_here")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("stats", stats))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO | filters.VOICE | filters.ANIMATION,
        echo_media
    ))
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
    application.add_handler(MessageHandler(filters.Sticker.ALL, echo_sticker))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ —ç—Ö–æ-–±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –º—ã –≤ Amvera (–µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT)
    if os.getenv('PORT'):
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è Amvera
        run_bot_in_thread(application)
        
        # –î–µ—Ä–∂–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–∏–≤—ã–º
        try:
            while True:
                import time
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    else:
        # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 